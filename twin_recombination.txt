#this goes in thermodynamics_calculate_remaining_quantities, if it goes anywhere. 
/** START #TWIN SECTOR - Written by Jared Barron */
  /** Do twin recombination and add it to the table - SHOULD DELETE. */
  /**if (pba->has_twin == _TRUE_) {
    class_call(thermodynamics_calculate_twin_quantities(ppr,pba,pth,pvecback),
               pth->error_message,
               pth->error_message);
  }**/
  /** END TWIN SECTOR */

/** START #TWIN SECTOR - Written by Jared Barron. This wrapper probably isn't actually necessary. */
/*int thermodynamics_calculate_twin_quantities(
                                             struct precision* ppr,
                                             struct background * pba,
                                             struct thermodynamics* pth,
                                             double* pvecback
                                             ) {
/ Do twin recombination /
  / START #TWIN SECTOR /
  / - solve recombination for the mirror sector using thermodynamics_recombination_twin() /
  if (pba->has_twin == _TRUE_) {
        class_call(thermodynamics_recombination_twin(ppr,pba,pth,pvecback),
        pth->error_message,
        pth->error_message);
  }
  / END TWIN SECTOR /

return _SUCCESS_;
}*/


/** END TWIN SECTOR */

/** START #TWIN SECTOR - Copied from 2.9, modified by Jared Barron to remove dependence on recombination structure. NOT NECESSARY? CHECK. */
/**
 * Recombination for the twin sector - Uses the relations as given in arXiv:1803.03263v2
 */

int thermodynamics_recombination_twin(
                                              struct precision * ppr,
                                              struct background * pba,
                                              struct thermodynamics * pth,
                                              double * pvecback
                                              ) {


  /** - define local variables */
  /* vector of variables to be integrated: x_e, x_He, Tb*/
  double y_twin[3],dy_twin[3] = {0,0,0};
    
  /* other recfast variables */
  double x_e,OmegaB_twin,zinitial;
  double x_H0_twin=0.,x_He0_twin;
  double z,mu_H_twin;
  double zstart,zend,rhs;
  /*Old, don't need i or Nz anymore 
  int i,Nz;*/
  int index_z;
  int flag[3]={1,1,1};
  double ztmp_max, ztmp_min;
  /*NEW line */
  double H0_invsec;

  /* OLD: contains all quantities relevant for the integration algorithm */
  struct generic_integrator_workspace gi;

  /* contains all fixed parameters which should be passed to thermodynamics_derivs_with_recfast */
  struct thermodynamics_parameters_and_workspace tpaw;

  /** -Old code to initialize generic integrator with initialize_generic_integrator() */
  class_call(initialize_generic_integrator(3, &gi),
             gi.error_message,
             pth->error_message);
             

  
 
  /* OLD: preco->H0 is H0 in inverse seconds (while pba->H0 is [H0/c] in inverse Mpcs) */
  /*preco->H0 = pba->H0 * _c_ / _Mpc_over_m_;*/
  /*New: H0_invsec is just a variable. initialized above */
  H0_invsec = pba->H0 * _c_ / _Mpc_over_m_;
  

  /* Omega_b */
  OmegaB_twin = pba->Omega0_b_twin;
  /*printf("OmegaB_twin = %e",OmegaB_twin);*/
  /* OLD Can we just get rid of this line?:Yp 
  preco->YHe_twin = pth->YHe_twin;*/

  /*OLD: Tnow */
  pth->Tnow_twin = pba->T0_twin;
  
  /**OLD: Constants related to twin recombination*/
  pth->CR_twin = 2.*_PI_*(_m_e_twin/_h_P_)*(_k_B_/_h_P_);
  pth->CB1_twin = _h_P_*_c_*_L_H_ion_twin/_k_B_;
  pth->CB1_He1_twin = _h_P_*_c_*_L_He1_ion_twin/_k_B_;
  pth->CB1_He2_twin = _h_P_*_c_*_L_He2_ion_twin/_k_B_;
  pth->CT_twin = (8. / 3.) * (_sigma_twin / (_m_e_twin * _c_)) *
                   (8. * pow(_PI_, 5) * pow(_k_B_, 4) / 15. / pow(_h_P_, 3) / pow(_c_, 3));
  
  /*OLD: z_initial (defined here)*/
  /* Guess the maximum redshift that will be required.  */
  /*New comment: I think the new default z_initial in class is high enough */
  /*How do I access the list of z values from the SM part? */
  zinitial = ppr->thermo_z_initial /*should be 5*10^6*/
  /*OLD: zinitial=floor(preco->CB1_He2_twin/(preco->Tnow_twin*32));//ppr->recfast_z_initial;
  if (zinitial<10000) {zinitial=10000;}
  pth->z_reco_twin = zinitial;*/
  
  /**OLD: - allocate memory for thermodynamics interpolation tables (size defined here) 
  preco->rt_size_twin = (int)floor(1.05*zinitial);
  
  OLD: Won't need anymore, recombination_table isn't a thing 
  class_alloc(preco->recombination_table_twin,preco->re_size_twin*preco->rt_size_twin*sizeof(double),pth->error_message);*/

  /*OLD: Nz 
  Nz=preco->rt_size_twin*/;
  
  
  /*UPDATE TO NON PRECO VERSIONS OF VARIABLES: related quantities */
  z=zinitial;
  mu_H_twin = 1./(1.-pth->YHe_twin);
  pth->fHe_twin = pth->YHe_twin/(_not4_ *(1.-pth->YHe_twin));
  pth->Nnow_twin = 3.*H0_invsec*H0_invsec*OmegaB_twin/(8.*_PI_*_G_*mu_H_twin*_m_H_twin);
  pth->n_e_twin = pth->Nnow_twin; /* Should we include the electrons in Helium ?? */
  /** - define the fields of the 'thermodynamics parameter and workspace' structure */
  tpaw.pba = pba;
  tpaw.ppr = ppr;
  /*New! */
  tpaw.pth = pth;
  /*OLD: preco 
  tpaw.preco = preco;*/
  tpaw.pvecback = pvecback;
  /*OLD: Replace preco with pth here. Need this variable though */
  pth->x_e_Lalpha=0.99; /**Used in the definition of Lambda_alpha_twin in derivs function to avoid fluctuations/flipping sign.
                        Stores the last calculated value of x_e_twin*/
    
  /** UPDATE TO NON PRECO VERSION- impose initial conditions at early times */
  x_e = 1.+2.*pth->fHe_twin;
  /**printf("Intitial x_e: %e",x_e);**/
  y_twin[0] = 1; /**Assuming that the Helium recombination is now complete */
  y_twin[1] = 1.;
  y_twin[2] = pth->Tnow_twin*(1.+z); /**Assuming that the Tb is same as T of dark photons */

  /** Opening a file to store the output of recombination in a file (for Debugging) */
  /*FILE *fTWINreco = fopen("recombination_twin.dat", "w");
  fprintf(fTWINreco, "   z    \t   xe   \t Tb(K)  \t   wb   \t  cb2   \tdkappa_dtau\n");*/

  /** -OLD: loop over redshift steps Nz; integrate over each step with
      generic_integrator(), store the results in the table using
      thermodynamics_derivs_twin()*/
  /*Should use 3.1 z_table (m_z? Idk what it's called) */

    for(index_z=0; index_z < pth->tt_size; index_z++) {
        
        /*Old time steps, linear spacing. Instead we just use the full table from the SM version now that it goes to high redshift. 
        zstart = zinitial * (double)(Nz-i) / (double)Nz;
        zend   = zinitial * (double)(Nz-i-1) / (double)Nz;*/
        
        /*New time steps */
        /*Dealing with highest redshift step - need zend to be largest thing in table, so we need to add a redshift before. this should be z_last + (z_last - z_secondlast) */
        if (index_z==0){zstart = pth->z_table[(pth->tt_size-1)] + (pth->z_table[(pth->tt_size-1)]-pth->z_table[(pth->tt_size-1)-1]);}
        else {zstart = pth->z_table[(pth->tt_size-1) - index_z + 1];}
        zend = pth->z_table[(pth->tt_size-1) - index_z];
        z = zend;
        
        
        /**UPDATE TO REMOVE PRECO: First Helium recombination (Using Saha Equation) */
        if (x_e>(1.+pth->fHe_twin)*1.0001) {
            /**printf("This is helium recombination 1 and shouldn't happen.");**/
            if(flag[0]==1 && x_e<(1.+2*pth->fHe_twin)*0.999)
            { if (pth->thermodynamics_verbose > 0) {printf("Starting He III -> He II recombination at z = %0.2f",z);};flag[0]=0;}
            x_H0_twin = 1.;
            x_He0_twin = 1.;
            
            rhs = exp( 1.5*log(pth->CR_twin*pth->Tnow_twin/(1.+z)) - pth->CB1_He2_twin/(pth->Tnow_twin*(1.+z)) ) / pth->Nnow_twin;
            
            x_e = 0.5*(sqrt(pow((rhs-1.-pth->fHe_twin),2) + 4.*(1.+2.*pth->fHe_twin)*rhs) - (rhs-1.-pth->fHe_twin));
            
            y_twin[0] = 1;
            y_twin[1] = 1;
            y_twin[2] = pth->Tnow_twin*(1.+z); /**Assuming that the Tb is same as T of dark photons */
            
        }
        /**UPDATE TO REMOVE PRECO:  Second Helium recombination (Using Saha Equation) */
        else if (x_e > 1.001) {
              /**printf("This is helium recombination 2 and shoudn't happen.");**/
              if(flag[1]==1)
              { if (pth->thermodynamics_verbose > 0) {printf("\nStarting He II -> He I recombination at z = %0.2f",z);};flag[1]=0;}
          
          rhs = 4.*exp(1.5*log(pth->CR_twin*pth->Tnow_twin/(1.+z)) - pth->CB1_He1_twin/(pth->Tnow_twin*(1.+z)))/pth->Nnow_twin;
          //rhs = 4.*exp(1.5*log(preco->CR_twin*1.4*preco->Tnow_twin/(1.+z)) - preco->CB1_He1_twin/(1.4*preco->Tnow_twin*(1.+z)))/preco->Nnow_twin;

          x_He0_twin = 0.5*(sqrt(pow((rhs-1.),2) + 4.*(1.+pth->fHe_twin)*rhs )- (rhs-1.));

          x_e = x_He0_twin;

          x_He0_twin = (x_e-1.)/pth->fHe_twin;
          y_twin[0] = 1;
          y_twin[1] = x_He0_twin;
          y_twin[2] = pth->Tnow_twin*(1.+z); /**Assuming that the Tb is same as T of dark photons */
        }
        /** UPDATE TO REMOVE PRECO: Hydrogen recombination */
        else {
            if(flag[2]==1)
            { if (pth->thermodynamics_verbose > 0) {printf("\nComputing Hydrogen recombination ...");};flag[2]=0;
                ztmp_max=z;
            }
            if (x_e > 0.1)
            {
              y_twin[2] = pth->Tnow_twin * (1. + z); /**Assuming that the Tb is same as T of mirror photons till x_e > 0.1*/
            }
            if(x_e > 0.99){
                /**printf("x_e: %e",x_e);**/
                rhs = exp(1.5*log(pth->CR_twin*pth->Tnow_twin/(1.+z)) - pth->CB1_twin/(pth->Tnow_twin*(1.+z)))/pth->Nnow_twin;
                
                x_e = 0.5*(sqrt(pow(rhs,2)+4.*rhs) - rhs);
                if(rhs>1e5){x_e=1;}
                /*if(x_e>1){printf("x>1: rhs=%g,x_e=%g,z=%g",rhs,x_e,z);}*/
                /*if(x_e<1){printf("rhs=%g,x_e = %g, z=%g",rhs,x_e,z);}*//**printf("This value of x_e shouldn't be much less than 1: %e",x_e);
                printf("current z is: %e",z);
                printf("number density now: %e",pth->Nnow_twin);**/
                y_twin[0]=x_e;
                y_twin[2] = pth->Tnow_twin * (1. + z); /**Assuming that the Tb is same as T of dark photons */
            }
            else{
            /**printf("current dark sector T: %e",y_twin[2]);
            printf("current z: %e",zstart);
            printf("current x_e: %e",x_e); **/
            /*Old integrator call, remove. Integrated derivatives over one time step and returned y_twin? Check. Where did it put the output? The output was y_twin, presumably?*/
            class_call(generic_integrator(thermodynamics_derivs_twin,
                                          zstart,
                                          zend,
                                          y_twin,
                                          &tpaw,
                                          ppr->tol_thermo_integration,
                                          ppr->smallest_allowed_variation,
                                          &gi),
                       gi.error_message,
                       pth->error_message);
            x_e = y_twin[0];
            if(y_twin[0] >= 0.9999){x_e = 1;} /**To avoid fluctuations*/
            if(x_e > 0.7){ztmp_min=z;}
            
            pth->x_e_Lalpha=x_e;
            }
            
        }
        
        /**if(x_e > 1){x_e = 1;} **//*Added because sometimes x_e evaluation was unstable and went above 1 */ 
        /*The following is cludgy but I think it will work to get rid of the random evaluatoins to <<1 when x_e should be 1. It checks if the previous value was one and if the current value is < 0.99, which shouldn't suddenly happen. */
        /**if((x_e<0.99) &&  pth->thermodynamics_table[(pth->tt_size-index_z-1+1)*pth->th_size+pth->index_th_xe_twin] ==1){x_e=1;}**/
        /**New version of adding values to recombination table, add them directly to thermodynamics_table */
        /*Check backward vs forward of redshift */
        /*redshift - do we need this line? Does thermodynamics_table store the redshifts in it? */
        /*
        pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_z_twin] = zend;*/
        
        /* ionization fraction */
        pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_xe_twin] = x_e;
        
        /* Tb */
        pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_Tb_twin] = y_twin[2];

        
        /* wb = (k_B/mu) Tb  = (k_B/mu) Tb */
        pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_wb_twin] = _k_B_ / ( _c_ * _c_ * _m_H_twin ) * (1. + (1./_not4_ - 1.) * pth->YHe_twin + x_e * (1.-pth->YHe_twin)) * y_twin[2];
        
        /* cb2 = (k_B/mu) Tb (1-1/3 dlnTb/dlna) = (k_B/mu) Tb (1+1/3 (1+z) dlnTb/dz) */
        pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_cb2_twin] = pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_wb_twin]* (1. + (1.+zend) * dy_twin[2] / y_twin[2] / 3.);
        
        /* dkappa/dtau = a n_e x_e sigma_T = a^{-2} n_e(today) x_e sigma_T (in units of 1/Mpc) */
        pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_dkappa_twin] = (1.+zend) * (1.+zend) * pth->Nnow_twin * x_e * _sigma_twin * _Mpc_over_m_;
        /*if (index_z<10) {printf("dkappadtau_twin is %e",pth->thermodynamics_table[(pth->tt_size-index_z-1)*pth->th_size+pth->index_th_dkappa_twin]);}*/

        /** writing to file recombination_twin.dat*/
        /*fprintf(fTWINreco, "%0.2f\t%0.4f\t%0.4f\t%0.3e\t%0.3e\t%0.3e\n", preco->recombination_table_twin[(Nz-i-1)*preco->re_size_twin+preco->index_re_z_twin],
         preco->recombination_table_twin[(Nz-i-1)*preco->re_size_twin+preco->index_re_xe_twin],
         preco->recombination_table_twin[(Nz-i-1)*preco->re_size_twin+preco->index_re_Tb_twin]*_k_B_/_eV_,
         preco->recombination_table_twin[(Nz-i-1)*preco->re_size_twin+preco->index_re_wb_twin],
         preco->recombination_table_twin[(Nz-i-1)*preco->re_size_twin+preco->index_re_cb2_twin],
         preco->recombination_table_twin[(Nz-i-1)*preco->re_size_twin+preco->index_re_dkappadtau_twin]); //Tb is in eV */
        
    }
  if (pth->thermodynamics_verbose > 0) {printf("done!\n");}
    /** Closing file*/
    /*fclose(fTWINreco);*/
    pth->Z_H_REC_MAX_twin=(ztmp_max+ztmp_min)/2;
  /** - cleanup generic integrator with cleanup_generic_integrator() */

  class_call(cleanup_generic_integrator(&gi),
             gi.error_message,
             pth->error_message);

  return _SUCCESS_;
}
/** END TWIN SECTOR */

/** START #TWIN SECTOR - Copied from 2.9, might not need to be modified? We'll see. NOT NECESSARY? CHECK*/
/**
 * Derivs function for the Mirror Sector
 * Called in thermodynamics_recombination_twin
 */

int thermodynamics_derivs_twin(
                                       double z,
                                       double * y_twin,
                                       double * dy_twin,
                                       void * parameters_and_workspace,
                                       ErrorMsg error_message
                                       ) {


  /* define local variables */

  double x,n_H,n_He,Trad,Tmat,Hz,xLaplha;

  struct thermodynamics_parameters_and_workspace * ptpaw;
  struct precision * ppr;
  struct background * pba;
  /*OLD RECO
  struct recombination * preco;*/
  /*New line */
  struct thermodynamics * pth;
  double * pvecback;

  double tau;
  int last_index_back;
    
  double lyman2_twin;
  double beta_twin;
  double Lambda_alpha_twin;
  double Lambda_2gamma_twin;
  double coeffXe_twin,coeffXe_twin_tmp;

  ptpaw = parameters_and_workspace;
  ppr = ptpaw->ppr;
  pba = ptpaw->pba;
  pth = ptpaw->pth;
  /*Old remove preco 
  preco = ptpaw->preco;*/
  pvecback = ptpaw->pvecback;
    
  /** Ground state energy of the twin hydrogen  (in Joules) */
  double epsilon0_twin = 13.6*_eV_*pba->ratio_vev_twin * (pba->alpha_dark/0.00729735)*(pba->alpha_dark/0.00729735);
  
  x = y_twin[0]; /**x_e*/
  /*Update to non preco */
  Trad = pth->Tnow_twin * (1.+z);
  Tmat = y_twin[2];
  n_H = pth->Nnow_twin * (1.+z) * (1.+z) * (1.+z);
  n_He = pth->fHe_twin * n_H;

  class_call(background_tau_of_z(pba,
                                    z,
                                    &tau),
                pba->error_message,
                error_message);

   class_call(background_at_tau(pba,
                                  tau,
                                  short_info,
                                  inter_normal,
                                  &last_index_back,
                                  pvecback),
                pba->error_message,
                error_message);
   /* Hz is H in inverse seconds (while pvecback returns [H0/c] in inverse Mpcs) */
   Hz=pvecback[pba->index_bg_H]* _c_ / _Mpc_over_m_;
    
    
  /** April 26: Changed lyman2_twin and Lambda_2gamma_twin to accommodate different alpha_dark from SM. Local constants related to recombination. lyman2_twin needs to be replaced with a more correct recombination coefficient.*/
  lyman2_twin = 0.448*(64.*_PI_/(sqrt(27.*_PI_)))*(pow(_eV_,4)/(pow(4*_PI_*_epsilon0_perm_,2)*pow(_m_e_twin,2)*pow(_c_,3)))*pow(epsilon0_twin/(_k_B_ *Trad),1./2.)*log(epsilon0_twin/(_k_B_*Trad))*(pba->alpha_dark/0.00729735)*(pba->alpha_dark/0.00729735);

  beta_twin = (lyman2_twin/4)*pow(2.*_PI_*(_m_e_twin/_h_P_)*(_k_B_/_h_P_)*Trad,3./2.)*exp(-epsilon0_twin/(4*_k_B_*Trad));
      
  Lambda_2gamma_twin = 8.227*pba->ratio_vev_twin*pow((pba->alpha_dark/0.00729735),8);
  Lambda_alpha_twin = 8*_PI_*Hz*pow(3*epsilon0_twin/(4*_h_P_*_c_),3)/(n_H*(1-pth->x_e_Lalpha + 0.0001));
  coeffXe_twin = -((Lambda_alpha_twin + Lambda_2gamma_twin)/(Lambda_alpha_twin + Lambda_2gamma_twin + 4*beta_twin))*lyman2_twin;
  
  /*printf("recomb coefficient: %e",coeffXe_twin);*/

  /*printf("twin electron mass: %e",_m_e_twin);*/
  dy_twin[0] = -1./(Hz*(1.+z))*coeffXe_twin*(n_H*pow(x,2)-(1-x)*pow(2.*_PI_*(_m_e_twin/_h_P_)*(_k_B_/_h_P_)*Trad,3./2.)*exp(-epsilon0_twin/(_k_B_*Trad)));
  dy_twin[1]=0; /** Assumed to be zero for now. Will be updated later.*/
  /* Twin baryon temperature */
  if (x < 0)/*Changed from 0.1 */
  {
    dy_twin[2] = pth->CT_twin * pow(Trad, 4) * x / (1. + x + pth->fHe_twin) * (Tmat - Trad) / (Hz * (1. + z)) + 2. * Tmat / (1. + z);
  }
  else
  {
    dy_twin[2] = 0;
  }
  return _SUCCESS_;
}
/** END TWIN SECTOR */